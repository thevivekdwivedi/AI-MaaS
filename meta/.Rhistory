installed.packages("tm", "SnowballC", "stringdist", "RecordLinkage")
install.packages("tm", "SnowballC", "stringdist", "RecordLinkage")
setwd("~/Documents/GitHub/AIMaaS/meta")
setwd("~/Documents/GitHub/AIMaaS/meta")
setwd("~/Documents/GitHub/AIMaaS/meta")
library(tm)
library(SnowballC)
library(stringdist)
library(RecordLinkage)
library(plyr)
library(textcat)
library(translate)
library(stringr)
library(rio)
library(RODBC)
library(RODBCDBI)
library(sqldf)
library(RMySQL)
library(readxl)
#conn = "MySQL" #if connecting to ai-maas
conn = "nodeTut" #if connecting to nodetut
#conn = "SQL_EXPRESS" #if connecting to SQL Server
#table names assignment
pSpendTable = "prospect_spend"
pSpendLtd = "prospect_spend_limited"
pMetaTable = "prospect_meta_data"
SMOTable = "unmatched_suppliers"
indMetaTable = "industry_meta_data"
pIndTable = "prospect_supplier_industry"
nwSuppTable = "network_suppliers"
pSavings = "prospect_savings"
pTasksTable = "tasks"
pSpendTableColOrder = c('Prospect_ID',	'Prospect_Supplier_Name',	'CapIq_Industry',	'Spend_USD',	'PO_Count',	'Invoice_Count',	'Enablement_Strategy',	'Match_Status',	'Critical')
pSpendLtdColOrder = c('Prospect_ID',	'Spend_USD',	'PO_Count',	'Invoice_Count')
pMetaTableColOrder = c('Prospect_ID',	'Prospect_Name',	'Version',	'Industry')
SMOTableColOrder = c('Prospect_ID',	'Prospect_Supplier_Name',	'Spend_USD',	'PO_Count',	'Invoice_Count',	'SMP_USD',	'Enablement_Strategy',	'Initial_time_MMM',	'Initial_time_YYYY', 'Match_Current_Status')
indMetaTableColOrder = c('Prospect_Industry',	'Critical_Industries',	'Supplier_Compliance_Multiplier',	'Invoice_Error_Multiplier',	'PO_Req_and_Trans_Multiplier',	'Invoice_Receipt_Multiplier')
pIndTableColOrder = c('Supplier_Name',	'CapIq_Industry')
nwSuppTableColOrder = c('Supplier_Name', 'Supplier_ID')
pSavingsColOrder = c('Prospect_ID',	'Enablement_Strategy',	'Supplier_Compliance_Savings_USD',	'Invoice_Error_Reduction_Savings_USD',	'PO_Requisition_Transmission_Savings_USD',	'Invoice_Receipt_Processing_Savings_USD')
pTasksTableColOrder = c('Prospect_ID', 'Task_Name', 'Task_Desc','IsDone')
unNecSavingCol = c('Spend_USD', 'PO_Count', 'Invoice_Count', 'Supplier_Compliance_Multiplier', 'Invoice_Error_Multiplier', 'PO_Req_and_Trans_Multiplier', 'Invoice_Receipt_Multiplier')
# args = commandArgs(TRUE)
# pid = try(as.character(args[1]), silent = TRUE)
# if(length(grep("ERROR", toupper(pid)))){
#   appendError(pid, paste("reading prospect Id argument from command line ", sep=""), pTasksTable, pTasksTableColOrder, 10000)
# }
# fPath = try(as.character(args[2]), silent = TRUE)
# if(length(grep("ERROR", toupper(fPath)))){
#   appendError(fPath, paste("reading file path from command line ", sep=""), pTasksTable, pTasksTableColOrder, 10000)
# }
# fName = try(as.character(args[3]), silent = TRUE)
# if(length(grep("ERROR", toupper(fName)))){
#   appendError(fName, paste("reading file name from command line ", sep=""), pTasksTable, pTasksTableColOrder, 10000)
# }
pid = 4
# fPath = "~/Work/Codathon/Data for Tables in Database/Testing"
fName = "Advanced_Mock_Data.xlsx"
# setwd(fPath)
#Common condition
commCond = paste("Prospect_ID = ", pid, sep="")
readTable = function(myTable, condition=NULL) {
dbhandle <- odbcConnect(conn)
query = paste('select * from ', myTable ,sep="")
if(!is.null(condition)){
query = paste(query, ' where ', condition, sep="")
}
res = try(sqlQuery(dbhandle, query), silent = TRUE)
close(dbhandle)
if(length(grep("ERROR", toupper(res)))){
appendError(res, paste("reading Table ", myTable, sep=""), pTasksTable, pTasksTableColOrder, pid)
}
#close(dbhandle)
as.data.frame(res)
}
calSMP = function(PO_Count, Inv_Count, Spend_USD) {
doc_Count = PO_Count + Inv_Count
minSMP = as.vector(rep(20000, length(doc_Count)))
checkElig = (doc_Count > 5) | (Spend_USD > 50000)
SMP = apply(as.array(0.00155*Spend_USD), 1, function(x){min(x, 20000)})*checkElig
SMP
}
deleteRows = function(myTable, condition) {
dbhandle <- odbcConnect(conn)
query = paste('delete from ', myTable ,' where ', condition, sep="")
res = try(sqlQuery(dbhandle, query), silent = TRUE)
close(dbhandle)
if(length(grep("ERROR", toupper(res)))){
appendError(res, paste("deleting Table ", myTable, sep=""), pTasksTable, pTasksTableColOrder, pid)
}
}
writeTable = function(df, myTable, upd = FALSE) {
dbhandle <- odbcConnect(conn)
#try(sqlDrop(dbhandle, myTable, errors = FALSE), silent = TRUE)
if (upd){
res = try(sqlSave(dbhandle, df, tablename = myTable, append=T, rownames = F, fast = F, colnames = F, safer = T), silent = TRUE)
#sqlSave(dbhandle, df, tablename = myTable, append=T, rownames = F, fast = F, colnames = F, safer = T)
} else {
res = try(sqlSave(dbhandle, df, myTable, append = FALSE, rownames = F, fast = F, colnames = F, safer = T), silent = TRUE)
}
if(length(grep("ERROR", toupper(res)))){
close(dbhandle)
appendError(res, paste("writing ", myTable, sep=""), pTasksTable, pTasksTableColOrder, pid)
}
query = paste('select count(*) from ', myTable ,sep="")
res = try(sqlQuery(dbhandle, query), silent = TRUE)
close(dbhandle)
if(length(grep("ERROR", toupper(res)))){
appendError(res, paste("evaluating ", query, sep=""), pTasksTable, pTasksTableColOrder, pid)
}
res
}
appendError = function(res, taskName, myTable, colOrder, pros_id) {
#close(handle)
taskDone = 0
df_args <- as.list(c(res, sep=""))
errMsg = do.call(paste, df_args)
errDf = as.data.frame(cbind(pros_id, taskName, errMsg, taskDone))
colnames(errDf) = colOrder
condition = paste("Prospect_ID = ", pros_id, sep="")
deleteRows(myTable, condition)
writeTable(errDf, myTable, upd = TRUE)
quit(save = "no")
}
aiMatch = function(compareData, renData) {
compareData = compareData[order(compareData[,1]),]
renData = renData[order(renData[,1]),]
compareData = as.data.frame(compareData)
renData = as.data.frame(renData)
ext = as.data.frame(compareData[,1])
ren = as.data.frame(renData[,1])
ext$normalName = as.character(ext[,1])
ren$normalName = as.character(ren[,1])
minusWords = c('co', 'corp', 'ltd', 'inc', 'limited', 'llc',
'pty', 'sa', 'company', 'incorporated', 'srl',
'pte', 's.r.l', 'l.l.c', 'l.p', 's.a', 'ag',
'p/l', 'k.k', 's.r.o', 'r.s', 'b.v', 'de', 'c.v', 'cv',
'lp', 'sp', 'zo', 'gmbh', 'and', 'corporation', 'intl', 'corpo',
'corp', 'corporat', 'corporate', 'sdn', 'bhd', 'sprl')
trim <- function(x) return(gsub("^ *|(?<= ) | *$", "", x, perl=T))
createCorpus = function(x)
{
x = tolower(x)
First5 = substr(x, 1, 5)
Last5 = str_sub(x, -5, -1)
SecFirst5 = substr(x, 2, 5)
isNumericFirst5 = !is.na(as.numeric(First5))
isNumericLast5 = !is.na(as.numeric(Last5))
isNumericSecFirst5 = !is.na(as.numeric(SecFirst5))
if(isNumericFirst5 || isNumericLast5 || isNumericSecFirst5)
{
x = removeNumbers(x)
}
x = removeWords(x, minusWords)
x = removePunctuation(x)
trim(x)
}
englishOnly = function(x)
{
x= gsub("?", "a", x)
x= gsub("?", "a", x)
x= gsub("?", "a", x)
x= gsub("?", "a", x)
x= gsub("?", "a", x)
x= gsub("?", "a", x)
x= gsub("?", "a", x)
x= gsub("?", "a", x)
x= gsub("?", "c", x)
x= gsub("?", "e", x)
x= gsub("?", "e", x)
x= gsub("?", "i", x)
x= gsub("?", "i", x)
x= gsub("?", "i", x)
x= gsub("?", "o", x)
x= gsub("?", "o", x)
x= gsub("?", "o", x)
x= gsub("?", "o", x)
x= gsub("?", "o", x)
x= gsub("s", "s", x)
x= gsub("?", "u", x)
x= gsub("?", "u", x)
x= gsub("z", "z", x)
x
}
ext$normalName = createCorpus(ext$normalName)
ren$normalName = createCorpus(ren$normalName)
ext = subset(ext, normalName != '')
ren = subset(ren, normalName !='')
ext$normalName = englishOnly(ext$normalName)
ren$normalName = englishOnly(ren$normalName)
ext$startsWith = as.factor(substr(ext$normalName,1,1))
ren$startsWith = as.factor(substr(ren$normalName,1,1))
colnames(ext)[1] = "ExtCustName"
colnames(ren)[1] = "RenCustName"
extsub = NULL
rensub = NULL
extStartVec = levels(ext$startsWith)
renStartVec = levels(ren$startsWith)
lenextStart = length(extStartVec)
lenrenStart = length(renStartVec)
for(m in 1: lenextStart)
{
n = which(renStartVec == extStartVec[m])
if(length(n)>0)
{
extsub[[m]] = subset(ext, startsWith == extStartVec[m])
rensub[[m]] = subset(ren, startsWith == renStartVec[n])
}
}
jaroprep = 0
match.s1.s2 = NULL
levenprep = 0
levensim = 0
for(m in 1:lenextStart)
{
startChar = unique(extsub[[m]][,3])
extrow = nrow(extsub[[m]])
renrow = nrow(rensub[[m]])
comp = rensub[[m]][,2]
against = extsub[[m]][,2]
if(length(comp)>0)
{
jaro = lapply(comp,
function(x, y)
{
jaroprep = jarowinkler(x,y)
maxJaro = max(jaroprep, na.rm = T)
maxJaroId = which.max(jaroprep)
cbind(maxJaroId, maxJaro)
},
y = against)
jaro = t(as.data.frame(sapply(jaro, "[", c(1,2))))
jaro = as.data.frame(jaro)
jaroScore = jaro[,2]
jaromaxId = jaro[,1]
renname = as.data.frame(rensub[[m]][,1])
extname = as.data.frame(extsub[[m]][jaromaxId,1])
matched = NULL
if(nrow(renname)>nrow(extname))
{
for (s in 1:nrow(renname))
{
matched = rbind(cbind(renname[s,1], extname, jaroScore), matched)
}
}
if(nrow(renname)<nrow(extname))
{
matched = rbind(cbind(renname, extname[1,1], jaroScore), matched)
}
if(nrow(renname)==nrow(extname))
{
matched = rbind(cbind(renname, extname, jaroScore), matched)
}
if(!is.null(matched)){
colnames(matched)[1] = "renCustName"
colnames(matched)[2] = "ExtCustName"
colnames(matched)[3] = "Similarity Score"
}
if(!is.null(match.s1.s2)){
colnames(match.s1.s2)[1] = "renCustName"
colnames(match.s1.s2)[2] = "ExtCustName"
colnames(match.s1.s2)[3] = "Similarity Score"
}
match.s1.s2 = rbind(matched, match.s1.s2)
print(paste("no.of rows processed = ", nrow(match.s1.s2)))
}
}
colnames(renData)[1] = "renCustName"
match.s1.s2[,3] = round(match.s1.s2[,3],2)
match = merge(x=renData, y=match.s1.s2, by="renCustName", all.x = TRUE)
match
}
nwSuppliers = readTable(nwSuppTable)
nwSuppliers = readTable(nwSuppTable)
warnings()
